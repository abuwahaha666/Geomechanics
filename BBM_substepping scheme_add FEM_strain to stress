%% Matlab Code for BBM Model
%% Author: Xi Luo, Texas A&M University

clear all;

%% Display Product Name, Author and License Information
    display(' ');
    display('Octave/Matlab code for BBM');
    display('Xi Luo, Texas A&M University');
    
%% Strain approach
%% Input Parameters

    display(' ');
    display('Input Parameters for BBM:');

    

    sy=input('Enter the initial Consolidation pressure (MPa) (eg., 0.001 MPa)  = ');
    sx=input('Enter the initial Confining pressure (MPa)     (eg., 0.00096 MPa)  = ');	
	sz=input('Enter the initial Confining pressure (MPa)     (eg., 0.00096 MPa)  = ');
	s0=input('Enter the initial suction (MPa)                (eg., 0 MPa)  = ');	
	
    
	
	e0=0.9286;    %____________________
	M=1;         
	l0=0.132;    %%Lamda
	k=0.010;     %%Kappa
	ks=0.010;    %%Kappas
	kk=0.23;        %%shear strength increment k
	nu=0.49999999999;     %Poissons ratio
	alpha=M*(M-9)*(M-3)/9/(6-M)/(1-k/l0); %Nonassociate flue rule factor
	r=2.0836;
	beta=0.07168;
	pr=16;    %Reference pressure for lamda change
	p0star0=0.13; % __________________
	


%% Strain Increament and Strain Matrix Definition (Including Suction Increment)
    display(' ');
    display('Strain & Suction increament and iteration:');
    iteration=input('Enter number of iterations to perform  (eg., 1000) = ');
	iter=iteration;



    strsteps=input('Enter the strain increament (in decimal) (eg., 0.0001) = ');
    ide=strsteps;
    de=ide;
    es=0:ide:(iter-1)*ide; % Strain

    ssteps=input('Enter the suction increament (in decimal) (eg., 0.001) = ');
	ids=ssteps;
	ds=ids;
	ss=0:ids:(iter-1)*ids; % Strain

    %FTOL=input('Enter FTOL (eg., 10^(-5))  = ');
	FTOL=10^(-6);

%% Block Memory allocation

    De=zeros(6,6);      % Stiffness Matrix

    suction=zeros(iter,1);    % Pore Water Pressure
    p=zeros(iter,1);    % Mean Stress
    q=zeros(iter,1);    % Deviatoric Stress	
	yield=zeros(iter,1);
	S=zeros(6,1);    % Shear stress is not set
	px=zeros(iter,1);
	py=zeros(iter,1);
	pz=zeros(iter,1);

	
    p0star=zeros(iter,1);
    void=zeros(iter,1); % Void ratio
    strain=zeros(6,iter);
	
	l=zeros(iter,1);
	dl=zeros(iter,1);
	Dee=zeros(3,3);
	F=zeros(4,iter);

	
	



%% Initialize   

     a=1;                               % Iterator
     S=[sx;sy;sz;0;0;0];                % Stress 
     p(a)=(S(1)+S(2)+S(3))/3;                
     q(a)=(S(2)-S(1));
	 p0star(a)=p0star0;
	 suction(a)=s0;
     void(a)=e0;
	 ls=l0*((1-r)*exp(-beta*suction(a))+r);
	 pc=pr*(p0star0/pr)^((l0-k)/(ls-k));
     yield(a)=q(a)^2-M^2*(p(a)+kk*suction(a))*(pc-p(a));
	 l(a)=0.015588;    %_____________________
     w=2;
	 DetJ=l(a)/2;
     B=[0 0 0 0;0 -1/2 0 1/2;0 -1/2 0 1/2]*2/l(a);
	 F(:,1)=w*DetJ*B'*[sx;sy;0];

	 
	 a=a+1;
	 


%% Iteration Uni-Loop Iteration for OC/NC & Inside/Outside Yield

    while a<=iter
	
	%Stress and Strain Updates
       dstrain=[0.;de;0.;0.;0.;0.];  %%oedomete%
	   dsuction=ds;  

    %  Parameters
	   suction(a)=suction(a-1)+dsuction;     % Suction must be updated bofore strain and so as all the fuctions associated with it 
       K=(1+void(a-1))*p(a-1)/k;                     % Bulk Modulus e must be updated
       Ks=(1+void(a-1))*(suction(a-1)+0.1)/ks;
       G=(3*K*(1-2*nu))/(2*(1+nu));        % Shear Modulus
	   ls=l0*((1-r)*exp(-beta*suction(a))+r);
	   pc=pr*(p0star(a-1)/pr)^((l0-k)/(ls-k));  %pc refers to P0
	   
	  
                     % Elastic Stiffness Matrix De
                     for m=1:6
                        for n=1:6
                           if m<=3
                                 if m==n
                                   De(m,n)= K+4/3*G; %Elastic Stiffness
                                 else if n<=3, De(m,n)=K-2/3*G;
                                 end
                           end
		                end
                           if m>3
                                  if m==n 
                                    De(m,n)= G;  %Elastic Stiffness
                                  else  De(m,n)=0;
                                  end
                           end
                        end
	                 end
       
       dS=De*dstrain;      
	   S1=S+dS;                      %All the temporary storage
	   p1=(S1(1)+S1(2)+S1(3))/3;                
       q1=(S1(2)-S1(1));
	   pc1=pc;
	   yield1=q1^2-M^2*(p1+kk*suction(a))*(pc1-p1);
     
       %Check elastic or plastic


		
	
                        if yield(a-1)<0 & yield1<=0       %Elastic  
                     
                     	
                     	 
                     	             S=S1;
                     	             px(a)=S(1,1); py(a)=S(2,1); pz(a)=S(3,1);
                     	             p(a)=p1;
                     	             q(a)=q1;
                     	             dp0star=0;
                                     p0star(a)=p0star(a-1)+dp0star;
                     	             yield(a)=yield1;
									 depsV=dstrain(1)+ dstrain(2)+dstrain(3); % Increamental Volumetric Strain
                                     depsD=2./3.*(dstrain(2)-dstrain(1));     % Increamental Deviatoric Strain
								
						             void(a)=void(a-1)-dsuction*ks/(suction(a)+0.1)-depsV*(1+void(a-1));
									 
									 
									 %%%1-D FEM
                     	             Dee=[De(1,1) De(1,2) De(1,4);De(2,1) De(2,2) De(2,4);De(4,1) De(4,2) De(4,4)];
									 w=2;
									 DetJ=l(a-1)/2;
                                     B=[0 0 0 0;0 -1/2 0 1/2;0 -1/2 0 1/2]*2/l(a-1);
									 Ke=w*DetJ*B'*Dee*B;
									 d=[0;0;0;dstrain(2)*l(a-1)];
									 
									 
                     	             F(:,a)=F(:,a-1)+Ke*d;
									 l(a)=l(a-1)*(1-depsV-dsuction/Ks); %%——————————————————————————————
                     	             %l(a)=l(a-1)*(1+(void(a)-void(a-1))/(1+void(a-1))); %%______________________________
									 dl(a)=l(1)-l(a);
									 %%%1-D FEM
						            
                                     display('elastic step');
                             
                     	  
                          
                        else    %%plastic
						
                             if yield(a-1)>=0 & yield1>0    
							 
							 
                                display('full plastic step');  
							 
							 
						         aaa=0;
								 
								 
						     	 See=S;
                     	         Plee=suction(a-1);
                     	         pee=p(a-1);
                     	         qee=q(a-1);
                     	         voidee=void(a-1);
						     
							 
                     	    
                             elseif yield(a-1)<0 & yield1>0
							 
							 
							 
                                display('Onset of plastic step');
							 
                     	    
							
                     	          %%%%calcualte elastic portion
                     	           it=10;
                     	           aa=zeros(it,1);
                     	           yielde=zeros(it,1);
                     	           Ple=zeros(it,1);
                     	           pe=zeros(it,1);
                     	           qe=zeros(it,1);
                     	           pxe=zeros(it,1);
                     	           pye=zeros(it,1);
                     	           pze=zeros(it,1);
                     	           voide=zeros(it,1);
                     	           
                     	           
                     	           Se=S;
                     	           aa(1)=0;
                     	           yielde(1)=yield(a-1);
                     	           Ple(1)=suction(a-1);
                     	           pe(1)=p(a-1);
                     	           qe(1)=q(a-1);
                     	           pxe(1)=Se(1,1); pye(1)=Se(2,1); pze(1)=Se(3,1);
                     	           voide(1)=void(a-1);
                     	           i=2;
                     	           aa(i)=yield(a-1)/(yield(a-1)-yield1);
                     	           yielde(i)=yield1;
							       
							       
                                           while i<it
						                   
                     	                   
                     		                    dstrain=aa(i)*[0.;de;0.;0.;0.;0.];  
                     		                    dsuction=aa(i)*ds;
                     		                    
                                                Ple(i)=Ple(i-1)+dsuction;     
                                                K=(1+voide(i-1))*pe(i-1)/k;                     % Bulk Modulus e must be updated
                                                Ks=(1+voide(i-1))*(Ple(i-1)+0.1)/ks;
                                                G=(3*K*(1-2*nu))/(2*(1+nu));        % Shear Modulus
                                                ls=l0*((1-r)*exp(-beta*Ple(i))+r);
                                                pce=pr*(p0star(a)/pr)^((l0-k)/(ls-k));  %pc refers to P0
                                                
                                                
                                                              % Elastic Stiffness Matrix De
                                                              for m=1:6
                                                                 for n=1:6
                                                                    if m<=3
                                                                          if m==n
                                                                            De(m,n)= K+4/3*G; %Elastic Stiffness
                                                                          else if n<=3, De(m,n)=K-2/3*G;
                                                                          end
                                                                    end
                     	                                         end
                                                                    if m>3
                                                                           if m==n 
                                                                             De(m,n)= G;  %Elastic Stiffness
                                                                           else  De(m,n)=0;
                                                                           end
                                                                    end
                                                                 end
                                                              end
                                                
                                                dSe=De*dstrain;      
                                                Se=Se+dSe;                      %All the temporary storage
                                                pe(i)=(Se(1)+Se(2)+Se(3))/3;                
                                                qe(i)=(Se(2)-Se(1));
                     		                    pxe(i)=Se(1,1);
                     		                    pye(i)=Se(2,1);
                     		                    pze(i)=Se(3,1);
                                                yielde(i)=qe(i)^2-M^2*(pe(i)+kk*Ple(i))*(pce-pe(i)); 
                     		                    depsV=dstrain(1)+ dstrain(2)+dstrain(3);      % Increamental Volumetric Strain
                                                depsD=2./3.*(dstrain(2)-dstrain(1));          % Increamental Deviatoric Strain
                     		                    voide(i)=voide(i-1)-dsuction*(void(i-1)+1)/Ks-depsV*(voide(i-1)+1);
                     		                    
                                                A3=[abs((pxe(i)-pxe(i-1))/pxe(i-1)) abs((pye(i)-pye(i-1))/pye(i-1)) abs((pze(i)-pze(i-1))/pze(i-1))];
                     	                        if max(A3)<10^(-3) 
                     		                         p1=pe(i); 
                     		                    	 q1=qe(i);
                     		                    	 dp0star=0;
                     		                    	 yield1=yielde(i);
                     		                         Pl=Ple(i);
                     		                    	 aaa=aa(i);
                     		                    	 dstrain=aaa*[0.;de;0.;0.;0.;0.];  
                     		                         dsuction=aaa*ds;
                     		                    	 break;
                     		                     else       %%division approach
                     		                     
                     		                         aa(i+1)=aa(i)-yielde(i)/(yielde(i)-yielde(i-1))*(aa(i)-aa(i-1));
                     		                    	 
                     		                    	 i=i+1;
                     		                     end		
                     	                   end
							     See=Se;
                     	         Plee=Ple(i);
                     	         pee=pe(i);
                     	         qee=qe(i);
                     	         voidee=voide(i);

							 end    %due to if elseif 
							 
							 
							 
							 		 %%%1-D FEM
                     	             Dee=[De(1,1) De(1,2) De(1,4);De(2,1) De(2,2) De(2,4);De(4,1) De(4,2) De(4,4)];
									 w=2;
									 DetJ=l(a-1)/2;
                                     B=[0 0 0 0;0 -1/2 0 1/2;0 -1/2 0 1/2]*2/l(a-1);
									 Ke=w*DetJ*B'*Dee*B;
									 d=[0;0;0;aaa*de*l(a-1)];
                     	             Fe=F(:,a-1)+Ke*d;
                     	             le=l(a-1)*(1-aaa*de-aaa*ds/Ks);
									 
                     	  
						  
						  
                     	      %%%calculate the plastic portion
                     	      
                                 itt=10000;
                     	         lsp=zeros(itt,1);
                     	         pcp=zeros(itt,1);
                     	         Plp=zeros(itt,1);
                     	         pp=zeros(itt,1);
                     	         qp=zeros(itt,1);
                     	         voidp=zeros(itt,1);
                     	         voidpp=zeros(itt,1);
                     	         p0starp=zeros(itt,1);
                     	         dT=zeros(itt,1);
                     	         dfds1=zeros(6,itt);
                                 dgds1=zeros(6,itt);
								 dfds2=zeros(6,itt);
                                 dgds2=zeros(6,itt);
						      
                                 Sp=See;
                     	         Plp(1)=Plee;
                     	         pp(1)=pee;
                     	         qp(1)=qee;
                     	         voidp(1)=voidee;

								 p0starp(1)=p0star(a-1);
                     	         T=0;
                     	         dT(1)=1; 
                                 nn=2;     %%%%%dT step increment, n step number
                     	         
                     	         
                     	         ppp=zeros(itt,1);
                     	         qpp=zeros(itt,1);
                     	         Plpp=zeros(itt,1);
                     	         p0starpp=zeros(itt,1);   			
                     	         lsp1=zeros(itt,1);
                     	         voidpp=zeros(itt,1);
                     	   
                     	   
                           
                     	    while T<1           
						    
                               %%%Calculate modified Euler method for first order and second order accuracy 
                     	      %%%dsigma1', dsigma2', dpo*1, dpo*2
						    
                     	    	
                     	       STOL=10^(-3); 		
                                 
                     	    	
                     	    	dstrain=(T+dT(nn-1))*(1-aaa)*[0.;de;0.;0.;0.;0.];  %%%The portion of plastic strain increment
                     	    	dsuction=(T+dT(nn-1))*(1-aaa)*ds;                  %%%The portion of plastic strain increment
                     	    	
                     	    	%%%%%beginning of first order dSp1 dp0star1
                     	        Plp(nn)=Plp(nn-1)+dsuction;     % Suction must be updated bofore strain and so as all the fuctions associated with it 
                                lsp(nn)=l0*((1-r)*exp(-beta*Plp(nn))+r);
                                pcp(nn)=pr*(p0starp(nn-1)/pr)^((l0-k)/(lsp(nn)-k));  %pc refers to P0
                     	    	K=(1+voidp(nn-1))*pp(nn-1)/k; 
                     	    	Ks1=(1+voidp(nn-1))*(Plp(nn-1)+0.1)/ks;            
                     	    	G=(3*K*(1-2*nu))/(2*(1+nu));
                     	    	% Elastic Stiffness Matrix De
                                               for m=1:6
                                                  for n=1:6
                                                     if m<=3
                                                           if m==n
                                                             De(m,n)= K+4/3*G; %Elastic Stiffness
                                                           else if n<=3, De(m,n)=K-2/3*G;
                                                           end
                                                     end
                     	                          end
                                                     if m>3
                                                            if m==n 
                                                              De(m,n)= G;  %Elastic Stiffness
                                                            else  De(m,n)=0;
                                                            end
                                                     end
                                                  end
                                               end
                     	    	
                                dfds1(1,nn)=M^2*(2*pp(nn-1)- pcp(nn)+kk*Plp(nn))/3-2*qp(nn-1);
                                dfds1(2,nn)=M^2*(2*pp(nn-1)- pcp(nn)+kk*Plp(nn))/3+2*qp(nn-1);
                     	    	dfds1(3,nn)=M^2*(2*pp(nn-1)- pcp(nn)+kk*Plp(nn))/3;
                     	    	dgds1(1,nn)=M^2*(2*pp(nn-1)- pcp(nn)+kk*Plp(nn))/3-2*alpha*qp(nn-1);
                                dgds1(2,nn)=M^2*(2*pp(nn-1)- pcp(nn)+kk*Plp(nn))/3+2*alpha*qp(nn-1);
                     	    	dgds1(3,nn)=M^2*(2*pp(nn-1)- pcp(nn)+kk*Plp(nn))/3;
                     	    	dfdp0star=-M^2*(pp(nn-1)+kk*Plp(nn))*(l0-k)/(lsp(nn)-k)*(p0starp(nn-1)/pr)^((l0-k)/(lsp(nn)-k)-1);
                     	    	dp0stardep=p0starp(nn-1)*(1+voidp(nn-1))/(l0-k);
                     	    	D=De-(De*dfds1(:,nn)*(dgds1(:,nn)')*De)/(-dfdp0star*dp0stardep*(dgds1(1,nn)+dgds1(2,nn)+dgds1(3,nn))+(dfds1(:,nn)')*De*dgds1(:,nn)); %Plastic
                     	    	R=dp0stardep*(dgds1(1,nn)+dgds1(2,nn)+dgds1(3,nn))*(dfds1(:,nn)')*De/(-dfdp0star*dp0stardep*(dgds1(1,nn)+dgds1(2,nn)+dgds1(3,nn))+(dfds1(:,nn)')*De*dgds1(:,nn));
						    
                                dpcdsuction=pr*log(p0starp(nn-1)/pr)*(p0starp(nn-1)/pr)^((l0-k)/(lsp(nn)-k))*(l0-k)/(lsp(nn)-k)^2*(beta*l0*(1-r)*exp(-beta*Plp(nn)));
                     	    	dfdSuction=-M^2*((pp(nn-1)+kk*Plp(nn))*dpcdsuction+kk*(pcp(nn)-pp(nn-1)));
                     	    	W=-De*dgds1(:,nn)*dfdSuction/(-dfdp0star*dp0stardep*(dgds1(1,nn)+dgds1(2,nn)+dgds1(3,nn))+(dfds1(:,nn)')*De*dgds1(:,nn));    %% plastic due to suction
                     	    	Q=dp0stardep*(dgds1(1,nn)+dgds1(2,nn)+dgds1(3,nn))*dfdSuction;
                                 
                     	    	dSp1=D*dstrain+W*dsuction;
                                dp0star1=R*dstrain+Q*dsuction;

                     	    	
                     	    	%%%%%end of first order 
                     	    	
                     	    	
                     	    	
                     	    	
                     	    	
                     	    	%%%%%beginning of second order stress increment
						    
						    
                     	    	%All the temporary storage
                     	    	Sp2=Sp+dSp1;
                     	    	p0starpp(nn-1)=p0starp(nn-1)+ dp0star1;
                     	    	depsV=dstrain(1)+ dstrain(2)+dstrain(3);      % Increamental Volumetric Strain
                                depsD=2./3.*(dstrain(2)-dstrain(1));          % Increamental Deviatoric Strain
                     	    	voidpp(nn-1)=voidp(nn-1)-dsuction*(voidp(nn-1)+1)/Ks1-depsV*(voidp(nn-1)+1);  %Pass to second order                     
                                ppp(nn-1)=(Sp2(1)+Sp2(2)+Sp2(3))/3;                
                                qpp(nn-1)=(Sp2(2)-Sp2(1)); 
                     	        Plpp(nn)=Plp(nn)+dsuction;  
                     	    	
                     	    	
                                 K=(1+voidpp(nn-1))*ppp(nn-1)/k;                    % Bulk Modulus e must be updated
                                 Ks=(1+voidpp(nn-1))*(Plpp(nn-1)+0.1)/ks;
                                 G=(3*K*(1-2*nu))/(2*(1+nu));        % Shear Modulus
                                 lspp(nn)=l0*((1-r)*exp(-beta*Plpp(nn))+r);
                                 pcpp(nn)=pr*(p0starpp(nn-1)/pr)^((l0-k)/(lspp(nn)-k));  %pc refers to P0
                            
						    
                                                 % Elastic Stiffness Matrix De
                                                 for m=1:6
                                                    for n=1:6
                                                       if m<=3
                                                             if m==n
                                                               De(m,n)= K+4/3*G; %Elastic Stiffness
                                                             else if n<=3, De(m,n)=K-2/3*G;
                                                             end
                                                       end
                     	                           end
                                                       if m>3
                                                              if m==n 
                                                                De(m,n)= G;  %Elastic Stiffness
                                                              else  De(m,n)=0;
                                                              end
                                                       end
                                                    end
                                                 end
                     	    	
                                dfds2(1,nn)=M^2*(2*ppp(nn-1)- pcpp(nn)+kk*Plpp(nn))/3-2*qpp(nn-1);
                                dfds2(2,nn)=M^2*(2*ppp(nn-1)- pcpp(nn)+kk*Plpp(nn))/3+2*qpp(nn-1);
                     	    	dfds2(3,nn)=M^2*(2*ppp(nn-1)- pcpp(nn)+kk*Plpp(nn))/3;
                     	    	dgds2(1,nn)=M^2*(2*ppp(nn-1)- pcpp(nn)+kk*Plpp(nn))/3-2*alpha*qpp(nn-1);
                                dgds2(2,nn)=M^2*(2*ppp(nn-1)- pcpp(nn)+kk*Plpp(nn))/3+2*alpha*qpp(nn-1);
                     	    	dgds2(3,nn)=M^2*(2*ppp(nn-1)- pcpp(nn)+kk*Plpp(nn))/3;
                     	    	dfdp0star=-M^2*(ppp(nn-1)+kk*Plpp(nn))*(l0-k)/(lspp(nn)-k)*(p0starpp(nn-1)/pr)^((l0-k)/(lspp(nn)-k)-1);
                     	    	dp0stardep=p0starpp(nn-1)*(1+voidpp(nn-1))/(l0-k);
                     	    	dpcdsuction=pr*log(p0starpp(nn-1)/pr)*(p0starpp(nn-1)/pr)^((l0-k)/(lspp(nn)-k))*(l0-k)/(lspp(nn)-k)^2*(beta*l0*(1-r)*exp(-beta*Plpp(nn)));
                     	    	dfdSuction=-M^2*((ppp(nn-1)+kk*Plpp(nn))*dpcdsuction+kk*(pcpp(nn)-ppp(nn-1)));
                     	    	
                     	    	
                     	    	D=De-(De*dfds2(:,nn)*(dgds2(:,nn)')*De)/(-dfdp0star*dp0stardep*(dgds2(1,nn)+dgds2(2,nn)+dgds2(3,nn))+(dfds2(:,nn)')*De*dgds2(:,nn)); %Plastic
                     	    	R=dp0stardep*(dgds2(1,nn)+dgds2(2,nn)+dgds2(3,nn))*(dfds2(:,nn)')*De/(-dfdp0star*dp0stardep*(dgds2(1,nn)+dgds2(2,nn)+dgds2(3,nn))+(dfds2(:,nn)')*De*dgds2(:,nn));
                     	    	W=-De*dgds2(:,nn)*dfdSuction/(-dfdp0star*dp0stardep*(dgds2(1,nn)+dgds2(2,nn)+dgds2(3,nn))+(dfds2(:,nn)')*De*dgds2(:,nn));    %% plastic due to suction
                     	    	Q=dp0stardep*(dgds2(1,nn)+dgds2(2,nn)+dgds2(3,nn))*dfdSuction;
                                 
                     	    	dSp2=D*dstrain+W*dsuction;
                                dp0star2=R*dstrain+Q*dsuction;
						    
                     	    	%%%%%end of second order
                     		                   		
                     		
                     	
                     
                             %%%%%Stresses updates
                     		
                     		Stdt=Sp+1/2*(dSp1+dSp2);          
                     		p0startdt=p0star(a-1)+1/2*(dp0star1+dp0star2);
                     		dTmin=0.0001;
                     		
                     		EPS=10^(-14);
                     		A=[abs((dSp2(1,1)-dSp1(1,1))/2/Stdt(1,1)) abs((dSp2(2,1)-dSp1(2,1))/2/Stdt(2,1)) abs((dSp2(3,1)-dSp1(3,1))/2/Stdt(3,1)) abs((dp0star2-dp0star1)/2/p0startdt) EPS];
                     		Rtdt=max(A);
                     		
                     	                if Rtdt>STOL
										   display('Rtdt>STOL');	
                     	                   A1=[0.9*sqrt(STOL/Rtdt) 0.1];
                     	                   qq=max(A1);
                     		               A2=[qq*dT(nn-1) dTmin];
                     					   qq=max(A2);
                     		               dT(nn)=qq*dT(nn-1); 
                                            
                     		            else %%
                     					    ptdt=(Stdt(1)+Stdt(2)+Stdt(3))/3;                
                                            qtdt=(Stdt(2)-Stdt(1));
                     						Pltdt=Plp(nn);
                     						pctdt=pr*(p0startdt/pr)^((l0-k)/(lsp(nn)-k));
                     					    yieldtdt=qtdt^2-M^2*(ptdt+kk*Pltdt)*(pctdt-ptdt);
											




											
											
                     						  if abs(yieldtdt)<FTOL
											     bb=0;
                     							 B00=[0.9*sqrt(STOL/Rtdt) 1.1];
                     	                         qq=min(B00);
                     						  else
                     						    display('Sorry go to slogan');	
                     							bb=-yieldtdt/((dfds2(:,nn)')*dfds2(:,nn)+(dfds1(:,nn)')*dfds1(:,nn))*2;
												%bb=0;
                     							Stdt=Stdt+bb*dfds2(:,nn);
                     							ptdt=(Stdt(1)+Stdt(2)+Stdt(3))/3;                
                                                qtdt=(Stdt(2)-Stdt(1));
												yieldtdt1=qtdt^2-M^2*(ptdt+kk*Pltdt)*(pctdt-ptdt);
                     							%postar not revised
												
                     							B11=[0.9*sqrt(STOL/Rtdt) 1.1];
                     	                        qq=min(B11);	 
                                                B1=[qq 1];
                                            	qq=min(B1);
                     						  end
                                                 pp(nn)=ptdt;
                     							 qp(nn)=qtdt;
                     							 Sp=Stdt;
                     							 p0starp(nn)=p0startdt;
                     							 voidp(nn)=voidpp(nn-1);
                     						T=T+dT(nn-1);
                     						dT(nn)=qq*dT(nn-1);
                                            B2=[dT(nn) dTmin];
                     						B3=[dT(nn) 1-T];
                     						dT(nn)=max(B2);
                              				dT(nn)=max(B3);
                     					end
                     		    nn=nn+1;
                     	    end %%due to while T<1 
							
							
							
			
							
                     	 S=Stdt;
                     	 px(a)=S(1,1); py(a)=S(2,1); pz(a)=S(3,1);
                     	 p(a)=pp(nn-1);
                     	 q(a)=qp(nn-1);
                         p0star(a)= p0starp(nn-1);
                     	 yield(a)=yieldtdt;
                     	 suction(a)=Pltdt;
                     	 void(a)=voidp(nn-1);
						 
						 
						 
						 			 %%%1-D FEM
                     	           
									 w=2;
									 DetJ=le/2;
                                     B=[0 0 0 0;0 -1/2 0 1/2;0 -1/2 0 1/2]*2/le;

									 sigma(1:3,1)=0;
									 sigma(1,1)=1/2*(dSp1(1,1)+dSp2(1,1))+bb*dfds2(1,nn); 
									 sigma(2,1)=1/2*(dSp1(2,1)+dSp2(2,1))+bb*dfds2(2,nn); 
									 sigma(3,1)=1/2*(dSp1(4,1)+dSp2(4,1))+bb*dfds2(4,nn); 
									 F(:,a)=Fe+w*DetJ*B'*sigma;	
									 depsV=dstrain(1)+ dstrain(2)+dstrain(3);      % Increamental Volumetric Strain
                                     depsD=2./3.*(dstrain(2)-dstrain(1));          % Increamental Deviatoric Strain
									 l(a)=l(a-1)*(1-depsV-dsuction/Ks1);
									 %l(a)=l(a-1)*(1+(void(a)-void(a-1))/(1+void(a-1)));
									 dl(a)=l(1)-l(a-1);
									 
                                     %%%1-D FEM

                         
                     
                        end %%due to if yield(a) and yield1
                            a=a+1;

                     	    

    end    %%due to while a<iter

	
	
	 
     semilogx(p(1:(iter-1)),void(1:(iter-1)))     %%consoilidation curve
     xlabel('Volumetric stress, p (MPa)')
     ylabel('void ratio, void')
	 
	 
	 
     plot(suction(1:(iter-1)),void(1:(iter-1)))     %%consoilidation curve
     xlabel('Suction, S (MPa)')
     ylabel('void ratio, void')
	 
	 
	 plot(p,q)
     xlabel('Volumetric stress, p (MPa)')
     ylabel('Deviatoric Stress, q (MPa)')
	 
	 plot(F(4,1:(iter-1)),dl(1:iter-1))
     xlabel('Vertical stress, F (MPa)')
     ylabel('axial displacement, uy (m)')
